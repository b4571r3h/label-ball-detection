name: CI-CD

on:
  push:
    branches: [ main ]

env:
  CONTEXT: ./ball-web-labeler-subpath
  DOCKERFILE: ./ball-web-labeler-subpath/Dockerfile
  IMAGE: ghcr.io/${{ github.repository_owner }}/label-ball-detection:latest
  REMOTE_DIR: /root/apps/ball-web-labeler

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR (push)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ env.IMAGE }}
          build-args: |
            BUILD_SHA=${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (f√ºr compose.deploy.yaml)
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.IONOS_SSH_KEY }}

      - name: Sanity check secrets
        env:
          HOST: ${{ secrets.IONOS_HOST }}
          USERNAME: ${{ secrets.IONOS_USER }}
          PORT: ${{ secrets.IONOS_PORT }}
        run: |
          set -e
          [ -n "$HOST" ] || { echo "Missing IONOS_HOST secret"; exit 1; }
          [ -n "$USERNAME" ] || { echo "Missing IONOS_USER secret"; exit 1; }
          PORT=${PORT:-22}
          echo "Will deploy to $HOST:$PORT as $USERNAME"

      - name: Prepare remote dir
        env:
          HOST: ${{ secrets.IONOS_HOST }}
          USERNAME: ${{ secrets.IONOS_USER }}
          PORT: ${{ secrets.IONOS_PORT }}
          REMOTE_DIR: ${{ env.REMOTE_DIR }}
        run: |
          set -e
          PORT=${PORT:-22}
          ssh -o StrictHostKeyChecking=no -p "$PORT" "$USERNAME@$HOST" "mkdir -p '$REMOTE_DIR'"

      - name: Copy compose.deploy.yaml to server (normalize LF)
        env:
          HOST: ${{ secrets.IONOS_HOST }}
          USERNAME: ${{ secrets.IONOS_USER }}
          PORT: ${{ secrets.IONOS_PORT }}
          REMOTE_DIR: ${{ env.REMOTE_DIR }}
          CONTEXT: ${{ env.CONTEXT }}
        run: |
          set -e
          PORT=${PORT:-22}
          scp -o StrictHostKeyChecking=no -P "$PORT" \
            "$CONTEXT/compose.deploy.yaml" \
            "$USERNAME@$HOST:$REMOTE_DIR/compose.deploy.yaml"

          ssh -o StrictHostKeyChecking=no -p "$PORT" "$USERNAME@$HOST" \
            "sed -i 's/\r$//' '$REMOTE_DIR/compose.deploy.yaml' && \
             printf '--- Remote compose.deploy.yaml ---\n' && nl -ba '$REMOTE_DIR/compose.deploy.yaml' | sed -n '1,120p'"

      - name: (Optional) Login GHCR on server (for private images)
        env:
          HOST: ${{ secrets.IONOS_HOST }}
          USERNAME: ${{ secrets.IONOS_USER }}
          PORT: ${{ secrets.IONOS_PORT }}
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          set -e
          PORT=${PORT:-22}
          if [ -n "${GHCR_USER}" ] && [ -n "${GHCR_TOKEN}" ]; then
            ssh -o StrictHostKeyChecking=no -p "$PORT" "$USERNAME@$HOST" \
              "echo '${GHCR_TOKEN}' | docker login ghcr.io -u '${GHCR_USER}' --password-stdin || true"
          else
            echo "Skipping GHCR login on server (no GHCR_USER/GHCR_TOKEN provided)."
          fi

      - name: Deploy (pull & recreate)
        env:
          HOST: ${{ secrets.IONOS_HOST }}
          USERNAME: ${{ secrets.IONOS_USER }}
          PORT: ${{ secrets.IONOS_PORT }}
          REMOTE_DIR: ${{ env.REMOTE_DIR }}
        run: |
          set -e
          PORT=${PORT:-22}
          ssh -o StrictHostKeyChecking=no -p "$PORT" "$USERNAME@$HOST" bash -lc "
            set -e
            cd '$REMOTE_DIR'
            docker compose -f compose.deploy.yaml pull
            docker compose -f compose.deploy.yaml up -d --remove-orphans --force-recreate
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.RunningFor}}'
          "
